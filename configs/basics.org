#+STARTUP: fnadjust
#+OPTIONS: f:t

* Package Management

  We should get packages from the melpa-stable, melpa, and gnu repos.
  #+BEGIN_SRC emacs-lisp
    (require 'package)
    (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
    ;(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
    (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))

    (package-initialize)
  #+END_SRC

  Now that we know where to get packages from, we can get and use
  [[https://github.com/jwiegley/use-package][use-package]] to manage the getting and using of all the other
  packages.
  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))

    (eval-when-compile
      (require 'use-package))
  #+END_SRC
  
* UI Tweaks And Keybindings

** Behave more like an IDE, even in the terminal
   If we're in a terminal, we should allow terminal-mouse stuff.
   #+BEGIN_SRC emacs-lisp
     (unless window-system
       (xterm-mouse-mode))
   #+END_SRC

** Project Management
   By default, emacs likes to think of things at the granularity of
   files (or "[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Buffers.html#Buffers][buffers]]", which is roughly an open file). However,
   [[https://github.com/bbatsov/projectile][projectile mode]] helps us think about "a project" as a thing that
   can be opened, and a context in which we can do things. For example
   "find a file in this project" or "find this text in a project" or
   similar.
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t
       :delight)
     (projectile-mode)
   #+END_SRC

   Now that we have projectile mode, we can bind a key for
   "control-p"- or "command-t"-like behaviour -- a fuzzy filename
   matcher that opens files in the current project. It's bound to ~C-c
   p g~ by default. Let's also bind it to command-p.

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "s-p") 'projectile--find-file-dwim)
   #+END_SRC

   You can ask emacs for all the other project-related shortcuts by
   typing ~C-c p ?~.

** Visual Stuff
   Display line numbers -- this is especially useful when
   pair-programming.
   #+BEGIN_SRC emacs-lisp
     (if (< emacs-major-version 26)
	 (progn
	   (unless window-system
	     (setq linum-format "%3d \u2502 "))
	   (global-linum-mode))
       (global-display-line-numbers-mode))
   #+END_SRC

   We can use +[[https://github.com/myrjola/diminish.el][diminish]]+ [[https://www.emacswiki.org/emacs/DelightedModes][delight]] to clean up the mode-line, by
   reducing the amount of space taken up by the names of all the
   various modes we might be running.
   #+BEGIN_SRC emacs-lisp
     (use-package delight
     :ensure t)
   #+END_SRC

   Make autocompletion friendlier.
   #+BEGIN_SRC emacs-lisp
     (ido-mode)
     (setq ido-auto-merge-work-directories-length -1)
   #+END_SRC

   If we're in a window system, use the [[https://emacsthemes.com/themes/nyx-theme.html][nyx theme]] to make emacs'
   colours a little prettier.
   #+BEGIN_SRC emacs-lisp
     (when (display-graphic-p)
	 (use-package nyx-theme
	   :ensure t)

	 (load-theme 'nyx t))
   #+END_SRC

   Enable transparency if your window manager supports it
   #+begin_src emacs-lisp
     (set-frame-parameter (selected-frame) 'alpha '(85 . 70))
     (add-to-list 'default-frame-alist '(alpha . (85 . 70)))
   #+end_src

   By default, we leave all the toolbars and menubars visible. But
   sometimes it's nice to get rid of all that and make things quiet.

   #+begin_src emacs-lisp
     (defun gds-quiet-ui ()
       "Make the GUI less noisy

     Turn off the tool-bar, menu-bar, and scrollbars"
       (interactive)
       (tool-bar-mode 0)
       (menu-bar-mode 0)
       (scroll-bar-mode 0))
   #+end_src

   We can use [[https://github.com/gonewest818/dimmer.el][dimmer.el]] to make it more obvious which window/pane is
   selected at a given time.

   #+begin_src emacs-lisp
     (use-package dimmer
       :load-path "~/.emacs.d/from-the-net/dimmer.el/"
       :delight
       :config
       (dimmer-configure-company-box)
       (dimmer-configure-gnus)
       (dimmer-configure-magit)
       (dimmer-configure-org)
       (setq dimmer-fraction 0.4)
       (dimmer-mode t))
   #+end_src

** Navigation

*** Browser-like back/forward buttons

    We can use the emacs [[https://www.emacswiki.org/emacs/BackButton][back button]] for browser-like navigation. So
    long as the toolbar is left on, we'll get back and forward buttons
    in the toolbar. If you want to navigate backwards and forwards
    with the keyboard, use the following:
    - For backwards ~C-x C-<left>~ or ~C-x <left>~.
    - For forwards ~C-x C-<right>~ or ~C-x <right>~.
    #+BEGIN_SRC emacs-lisp
      (use-package back-button
        :ensure t
	:delight
        :commands back-button-mode)
      (back-button-mode 1)
      (define-key back-button-mode-map (kbd "C-x <left>") 'back-button-global-backward)
      (define-key back-button-mode-map (kbd "C-x <right>") 'back-button-global-forward)
    #+END_SRC

    Note that by default, the =back button= package uses ~C-x <left>~
    and ~C-x <right>~ for moving backward and forward in the current
    buffer only. To go backwards and forwards across buffers, you need
    to use ~C-x C-<left>~ and ~C-x C-<right>~. Unfortunately
    ~C-<left>~ and ~C-<right>~ don't work at the termina. Since we
    think that inter-buffer (global) movement is more valuable than
    the local movement, we map both sets of shortcuts to that.

*** Jumping the cursor around
    I like to be able to navigate quickly to wherever on the screen I
    happen to be looking. I do this with [[https://github.com/abo-abo/avy][avy]]. Since navigation is
    pretty much the most common thing I do in an editor, I want
    shortcuts that are extremely short, and that don't clash with any
    of the other millions of shortcuts in the emacs ecosystem. To get
    this, I use [[https://www.emacswiki.org/emacs/KeyChord][key-chords]]:
    - If you mash ~jl~, every line on screen will get a two-character
      label. Type the label to jump to that line.
    - If you mash ~jw~, every window on screen will get a one-character
      label. Type the label to jump to that line[fn:1].
    - If you mash ~jj~, you get prompted for a character. Type the
      first character of the word you want to jump to. Now all words
      that begin with that character will be labelled. Type the label
      to jump to that word.
      #+BEGIN_SRC emacs-lisp
	(use-package key-chord
	  :ensure t
	  :delight
	  :config
	  (use-package avy
	    :ensure t
	    :delight)
	  (use-package ace-window
	    :ensure t
	    :delight)
	  (key-chord-mode t)
	  (key-chord-define-global "jj" 'avy-goto-word-1)
	  (key-chord-define-global "jl" 'avy-goto-line)
	  (key-chord-define-global "jw" 'ace-window)
	  (avy-setup-default))
      #+END_SRC

** Multiple-cursor editing
   Allow editing with [[https://github.com/magnars/multiple-cursors.el][multple cursors]]. There's a good [[http://emacsrocks.com/e13.html][introduction video here]].
   #+BEGIN_SRC emacs-lisp
       (use-package multiple-cursors
	 :ensure t
	 :delight
	 :config
	 (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
	 (global-set-key (kbd "C->") 'mc/mark-next-like-this)
	 (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
	 (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))
   #+END_SRC

** Sort out emacs' crazy undo/redo system
   Quoting from the [[http://www.dr-qubit.org/undo-tree.html][undo-tree web page]]:
   #+BEGIN_QUOTE
   Emacs has a powerful undo system. Unlike the standard undo/redo
   system in most software, it allows you to recover any past state of
   a buffer (whereas the standard undo/redo system can lose past
   states as soon as you redo). However, this power comes at a price:
   many people find Emacs' undo system confusing and difficult to use
   #+END_QUOTE

   I agree. To get an idea of how non-intuitive the vanilla-emacs undo system
   is, note that there is a keybinding for ~undo~, but no keybinding
   for ~redo~.

   The undo-tree package solves the problem by:
   - Having a redo function
   - Still allowing us to recover all past states of the buffer, by
     visualising those states as a tree.

   To undo a change, hit ~C-z~ [fn:2], ~C-/~ or ~C-_~ as normal. To
   redo a change, hit ~C-?~ or ~M-_~. If you undo a few changes,
   accidentally type something (so "redo" will no longer do anything),
   and suddenly realise that you shouldn't have hit "undo" in the
   first place, then hit ~C-x u~. This will show you a tree
   representation of the changes you just made, undid, and the new
   timeline you created when you accidentally typed whatever it was
   you typed. You can move around in this branching timeline by
   clicking, or using standard emacs navigation keys.

   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :ensure t
       :delight)
     (global-undo-tree-mode)
       ;; https://www.emacswiki.org/emacs/UndoTree
   #+END_SRC

   Out of the box, undo-tree doesn't play nicely with the line numbers
   we might be relying on for pair-programming. To fix this (as [[https://www.emacswiki.org/emacs/UndoTree][suggested here]]), we can
   add a bunch of advice around the undo-tree functions which force
   the line numbers to update themselves.
   #+BEGIN_SRC emacs-lisp
     (when (< emacs-major-version 26)
       (defun undo-tree-visualizer-update-linum (&rest args)
	 (linum-update undo-tree-visualizer-parent-buffer))
       (advice-add 'undo-tree-visualize-undo :after #'undo-tree-visualizer-update-linum)
       (advice-add 'undo-tree-visualize-redo :after #'undo-tree-visualizer-update-linum)
       (advice-add 'undo-tree-visualize-undo-to-x :after #'undo-tree-visualizer-update-linum)
       (advice-add 'undo-tree-visualize-redo-to-x :after #'undo-tree-visualizer-update-linum)
       (advice-add 'undo-tree-visualizer-mouse-set :after #'undo-tree-visualizer-update-linum)
       (advice-add 'undo-tree-visualizer-set :after #'undo-tree-visualizer-update-linum))
   #+END_SRC

   
*** TODO Add toolbar button for =redo= and ~undo-tree-visualize~
    Having sensible undo/redo shortcuts is great, but it'd be even
    better to have toolbar buttons for more than just the =undo= part
    of the picture.

** Handy Tools
   Start a shell with a single keypress.
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x M-m") #'eshell)
   #+END_SRC

   Make dired (directory editing) behaviour more sensible:
   - If we open two directory windows next to each other and ask to
     move a file from one of them, the other will be the default
     target.
   - Hit ~r~ on a directory window in order to edit filenames and
     permissions like regular text.
   #+BEGIN_SRC emacs-lisp
     (require 'wdired)
     (setq
      dired-dwim-target t
      wdired-allow-to-change-permissions t)
     (define-key dired-mode-map "r" 'wdired-change-to-wdired-mode)
   #+END_SRC

   Let's have a [[https://github.com/scrooloose/nerdtree][NERDTree]]-like file browser. There's one called
   [[https://github.com/jaypei/emacs-neotree][neotree]]. We'll bind it to `<f8>`, to toggle on and off.

   #+BEGIN_SRC emacs-lisp
     (use-package neotree
       :ensure t
       :delight
       :commands neotree-toggle
       :bind (("<f8>" . neotree-toggle)))
   #+END_SRC

** Make Backups More Sensible

   - Don't clobber symlinks with backup files
   - Put all backups in =~/.saves= instead of right next to the files I'm editing
   - Version the backups
   #+BEGIN_SRC emacs-lisp
     (setq
	backup-by-copying t
	backup-directory-alist
	 '(("." . "~/.saves"))
	delete-old-versions t
	kept-new-versions 6
	kept-old-versions 2
	version-control t)
   #+END_SRC

** Don't close files when I type cmd-k

   The cmd-k shortcut is used for navigation in slack on mac. In emacs
   on mac, it seems to be set to kill the current buffer. Let's stop
   that.

   #+BEGIN_SRC emacs-lisp
     (global-unset-key (kbd "s-k"))
   #+END_SRC

** Optional windows-friendly shortcuts
   I'd like this config to be pretty friendly to folks who're used to
   "normal" IDEs like IntelliJ. But I also want to be able to use
   things like the cool [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Rectangles.html#Rectangles][emacs rectangle editing
   functions]]. Unfortunately, all the rectancle shortcuts begin with
   =C-x=, which windows users will expect to mean =cut to clipboard=.

   We can toggle between windows-style and emacs-style with =M-x
   cua-mode=. If you're pairing with someone who expects windows-style
   shortcuts, do that.

*** TODO Add a toolbar button for toggling ~cua-mode~ on and off.
    It's a pain to remember that command, so I windows logo in the
    toolbar would probably be easier.

    
** Enable narrowing
   [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Narrowing.html][Narrowing]] is a handy trick that focuses your editor on a small part
   of a potentially very large file. This can be useful when
   presenting work to other people, or for scoping a semi-automated
   edit. For example, suppose I wanted to use a keyboard macro to edit
   many instances of a common pattern, but only within one section of
   my file. If I narrow to that section before editing, then my macro
   cannot accidentally affect the rest of the file.

   Narrowing is turned off by default, so let's turn it on:

   #+BEGIN_SRC emacs-lisp
     (put 'narrow-to-region 'disabled nil)
   #+END_SRC

** Make the emacs help system prettier
   The emacs help system is AWESOME, right out of the box. If you've
   never played with it before, start with either =C-h C-h= (to get
   help on help) or =C-h t= to start the emacs tutorial. You can look
   up any package, any keybinding, any function, and any variable in
   your emacs. You can find out what it does, where it was defined,
   and so on.

   The [[https://github.com/Wilfred/helpful][helpful]] package adds the icing to the cake. It syntax
   highlights the help text, and adds a bunch of useful contextual
   information and hyperlinks.

   #+BEGIN_SRC emacs-lisp
     (use-package helpful
       :ensure t
       :bind
       ("C-h f" . helpful-callable)
       ("C-h v" . helpful-variable)
       ("C-h k" . helpful-key)
       ("C-c C-d" . helpful-at-point))
   #+END_SRC
* Org-mode config
** Enable Structure Templates

   Org-mode structure templates are handy for entering common org-mode
   boilerplate. For example, for creating source code blocks, and so
   on. You can read about them [[https://orgmode.org/manual/Structure-Templates.html#Structure-Templates][on the web]], or in your [[info:org#Structure Templates][local org info
   page]].

   I like to enable inline snippet expansion:
   #+begin_src emacs-lisp
     (require 'org-tempo)
   #+end_src

** Export to more formats
   By default, org-mode will only export to ascii, html, icalendar, and
   latex. We can enable markdown, beamer and odt support.

   #+BEGIN_SRC emacs-lisp
     (setq org-export-backends (list 'ascii 'html 'icalendar 'latex 'md 'beamer 'odt))
   #+END_SRC

   For more formats, we need to install stuff. Here's one for
   exporting to the format used by Atlassian Confluence -- which is a
   wiki we use at work.

   #+begin_src emacs-lisp
     (use-package ox-confluence
       :load-path "~/.emacs.d/from-the-net/")

     (add-to-list 'org-export-backends 'confluence)
   #+end_src

** Hyperlink to anything
   One of the helpful things in org-mode is its ability to [[https://orgmode.org/manual/Hyperlinks.html#Hyperlinks][hyperlink]]
   between lots of different types of things. I find it useful to have
   a global binding for ~org-store-link~, as suggested [[https://orgmode.org/manual/Handling-links.html][in the manual]].

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c l") 'org-store-link)
   #+END_SRC

** Enable time tracking
   Org-mode also has a handy [[https://orgmode.org/manual/Clocking-work-time.html][time-tracking feature]], which you can use
   to keep track of how long you spend working on different tasks.

   #+BEGIN_SRC emacs-lisp
     (setq org-clock-persist 'history)
     (org-clock-persistence-insinuate)
   #+END_SRC

** Task management
   Org-mode works great as a task-management system. I like mine to
   sync with trello, so I can use the same task lists in android as I
   do on my laptop -- [[file:internetting.org::*Trello][that plumbing is here]].

   I like to have six levels of task:
   - things I want to do
   - things I'm doing right now
   - things I've done
   - things I can't do, and it's not my fault
   - things I might do later
   - things I'm totally not doing

   #+BEGIN_SRC emacs-lisp
     (setq org-todo-keywords
	   '((sequence "TODO(t!/!)" "DOING(g!/!)"
		       "|"
		       "DONE(d!/!)" "BLOCKED(b@/!)" "LATER(l!/!)" "NOTDOING(n@/!)")))
     (setq org-log-into-drawer t)
   #+END_SRC

   Note that the =BLOCKED= and =NOTDOING= states have a funny =@= code
   in them. This means that when I decide that I'm blocked on
   something, I'll usually want to record what I'm blocked on. And
   when I'm not doing something, I'll generally want to record
   why. Those recordings should go into a drawer where I don't have to
   look at them most of the time.
   
   When I finish a thing, I like to record when I finished it.
   #+BEGIN_SRC emacs-lisp
     (setq org-log-done 'time)
   #+END_SRC

*** Viewing and capturing tasks
    Often a task will pop into existence while in the middle of
    another task. That's what =org-capture= is for. If I'm reading an
    email and realise that I need to do a thing about this email, I
    hit =C-c c= and get an entry in my main org file.

    If I want to see what jobs need doing, I can use my agenda. I hit
    =C-c a= to get a generated list of things that need doing.

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-c c") 'org-capture)
      (global-set-key (kbd "C-c a") 'org-agenda)
    #+END_SRC
   
    For this to work, we need to actually have some todo lists. Since
    I like mine to be in sync between org and trello, that bit of [[file:internetting.org::*Trello][the
    plumbing is here]].

    Because we're using org-trello, we need to capture all tasks as
    top-level items (trello doesn't support trees). I like to capture
    tasks as regular =TODO= items, which may or may not have deadlines.

    #+BEGIN_SRC emacs-lisp
      (setq org-capture-templates
	    '(
	      ("t" "Todo" entry (file org-default-notes-file)
	       "* TODO %? \n  %a%(gds-org-pop-gmail-link)\n  %K"
	       )
	      ("1" "Todo by tomorrow" entry (file org-default-notes-file)
	       "* TODO %? \n  :DEADLINE: <%(gds-tomorrow)>\n  :PROPERTIES:\n  :END:\n  %a%(gds-org-pop-gmail-link)\n  %K"
	       )
	      ("2" "Todo within a week" entry (file org-default-notes-file)
	       "* TODO %? \n  :DEADLINE: <%(gds-next-week)>\n  :PROPERTIES:\n  :END:\n  %a%(gds-org-pop-gmail-link)\n  %K"
	       )
	      ("3" "Todo within a fortnight" entry (file org-default-notes-file)
	       "* TODO %? \n  :DEADLINE: <%(gds-in-a-fortnight)>\n  :PROPERTIES:\n  :END:\n  %a%(gds-org-pop-gmail-link)\n  %K"
	       )
	      ("4" "Todo within a month" entry (file org-default-notes-file)
	       "* TODO %? \n  :DEADLINE: <%(gds-next-month)>\n  :PROPERTIES:\n  :END:\n  %a%(gds-org-pop-gmail-link)\n  %K"
	       )
	      ("5" "Todo within two months" entry (file org-default-notes-file)
	       "* TODO %? \n  :DEADLINE: <%(gds-in-two-months)>\n  :PROPERTIES:\n  :END:\n  %a%(gds-org-pop-gmail-link)\n  %K"
	       )))
    #+END_SRC

**** Hyperlinks and Gmail Integration
     One helpful feature of these capture templates is the =%a=, which
     means whenever we capture a task, it will include a hyperlink to
     whatever we were doing before we hit =C-c c=. For example, if I'm
     reading an email from a customer asking a difficult question, I
     might hit =C-c c= and create a task to do the technical experiment
     I need to do in order to answer that question. When I complete
     that task sometime later, I can follow the link in the task to
     find the email I want to reply to with my results.

     This works great so long as I live entirely within emacs, but I'll
     also often want to refer to my tasks from within trello. In those
     situations, I need links to gmail rather than gnus. To make that
     work, we'll need to join this org-capture config with [[file:internetting.org::*Email][our email
     config]]. We'll create a variable ~gds-org-gmail-link-buffer~ to
     communicate through. We'll configure gnus to fill that buffer with
     a gmail link every time we call =org-capture=. At this end, we'll
     pop any link out of the buffer and use it in our capture.
    
     #+BEGIN_SRC emacs-lisp
       (defvar gds-org-gmail-link-buffer nil
	 "A gmail link to a recently viewed email.

       This is a one-place buffer, which might be nil, or might contain
       a link to an email using Gmail. It should be set before calling
       `org-capture', whereupon `gds-org-pop-gmail-link' will use it,
       and set it back to nil.")

       (defun gds-org-pop-gmail-link ()
	 "Return either a link to a recent email, or \"\".

       If there's a gmail link waiting in `gds-org-gmail-link-buffer',
       then use it to construct a string for an org capture, set the
       buffer to nil. If not, return the empty string."
	 (let ((link gds-org-gmail-link-buffer))
	   (if link
	       (progn
		 (setq gds-org-gmail-link-buffer nil)
		 (format "\n  %s" link))
	     "")))
     #+END_SRC

     
**** Helper functions
     Finally, we need a few little date utility functions, for when we
     want to capture a task that only makes sense for the next day,
     week, month, etc.

     #+BEGIN_SRC emacs-lisp
       (defun gds-today ()
	 "Get today's date as a string."
	 (format-time-string "%F" (current-time)))

       (defun gds-tomorrow ()
	 "Get tomorrow's date as a string."
	 (format-time-string "%F" (time-add (current-time) (days-to-time 1))))

       (defun gds-next-week ()
	 "Get next week's date as a string."
	 (format-time-string "%F" (time-add (current-time) (days-to-time 7))))

       (defun gds-in-a-fortnight ()
	 "Get next fortnight's date as a string."
	 (format-time-string "%F" (time-add (current-time) (days-to-time 14))))

       (defun gds-next-month ()
	 "Get next month's date as a string."
	 (cl-destructuring-bind (sec min hour day month year dow dst zone)
	     (decode-time (current-time))
	   (format-time-string "%F" (encode-time 0 0 0 day (+ 1 month) year))))

       (defun gds-in-two-months ()
	 "Get two month's date as a string."
	 (cl-destructuring-bind (sec min hour day month year dow dst zone)
	     (decode-time (current-time))
	   (format-time-string "%F" (encode-time 0 0 0 day (+ 2 month) year))))
     #+END_SRC

* OS Helpers
** Mac webcam or sound management
   When I'm on a mac, sometimes my webcam or sound stop working. The
   way to fix it is to kill some process, and allow the system to
   restart it.

   #+BEGIN_SRC emacs-lisp
     (defun gds-fix-camera ()
       "On a mac, restart the camera driver."
       (interactive)
       (shell "*fix-camera*")
       (with-current-buffer "*fix-camera*"
	 (insert "sudo pkill VDCAssistant")))

     (defun gds-fix-sound ()
       "On a mac, restart the sound driver."
       (interactive)
       (shell "*fix-sound*")
       (with-current-buffer "*fix-sound*"
	 (insert "sudo kill -9 `ps ax|grep 'coreaudio[a-z]' | awk '{print $1}'`")))
   #+END_SRC
*** TODO Make this a proper interactive thing that asks for the sudo password, then gets out of the way when it's done.
    :LOGBOOK:
    - State "TODO"       from              [2019-06-19 Wed 10:31]
    :END:
* Emacs Server

  The [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html][emacs server]] and accompanying ~emacsclient~ allows us to edit
  files at the commandline (for example, as a result of running ~git
  commit~) in an existing instance of emacs. This has the advantages
  of:
  - Faster startup times for the client
  - Access to common state in all instances of the editor, for
    example, for use in autocomplete functions

  The client only works if there is an instance of emacs running, in
  which the command ~M-x server-start~ has been run. We could include
  that command in these configs. Howvever, if we did that, then every
  invocation of ~emacs~ after the first would suffer an error. This is
  because it would attempt to start a second server listening on the
  same port as the first.

  Rather than invite errors of that kind, my preference is to use the
  following wrapper scripts around ~emacsclient~.

  In ~$HOME/bin/e~:
  #+begin_src bash
    #!/usr/bin/env bash
    emacsclient -a "" -t "${@}"
  #+end_src

  In ~$HOME/bin/ec~:
  #+begin_src bash
    #!/usr/bin/env bash
    emacsclient -a "" -c "${@}"
  #+end_src

  The ~e~ script starts a terminal-based client. The ~ec~ script
  starts a client in a GUI window. We can therefore add ~$EDITOR="e"~
  to our ~.bashrc~.

* Footnotes

[fn:1] If there are only two windows open, avy will skip the
label-and-choose step, and just jump you straight into the other
window.

[fn:2] So long as you've enabled ~cua-mode~. See [[*Optional windows-friendly shortcuts][Optional windows-friendly shortcuts]] above.
